import prisma from '@/lib/prisma';
import { toCamelCase } from '@/utils/text/camelCase';
import fs from 'fs';
import path from 'path';


// type asserted as any b/c we need to access any model
const prismaClient = prisma as any;

const Main = async () => {
  console.log('🌱 Starting the seed process...');

  // get the data files
  const dataDirPath = path.join(__dirname, 'data');

  const dataFiles = fs.readdirSync(dataDirPath);
  console.log(`📍 Found data files: ${dataFiles.join(', ')}`);


  // handle each file
  for (const fileName of dataFiles) {

    // import the data
    const filePath = path.join(dataDirPath, fileName);
    const { data } = require(filePath);
    const { modelName, seed, staticRecordName, staticRecordKeyName, dependency } = data;

    if (dependency) {
      // skip and then run once all others done
    }

    // ensure model exists on the prisma client/postgresql database
    if (!prismaClient[modelName]) {
      console.warn(`💔 Skipping ${fileName}: Model ${modelName} does not exist on Prisma Client`);
    }

    // ensure seed data exists
    if (!seed || !Array.isArray(seed)) {
      console.warn(`💔 Skipping ${fileName}: No seed array found`);
    }

    // clear existing data
    await prismaClient[modelName].deleteMany({});


    console.log(`🌱  Seeding ${modelName}...`);


    // seed data
    const response = await prismaClient[modelName].createManyAndReturn({
      data: seed,
    });
    console.log(`✅ Seeded ${response.length} records into ${modelName}.`);


    // create static records
    const outputPath = path.join(__dirname, "..", "..", "configs", "staticRecords", fileName)
    const exportName = staticRecordName ? staticRecordName : path.basename(fileName, '.ts');
    const keyName = staticRecordKeyName ? staticRecordKeyName : 'name'
    const transformedRecords = response.reduce((acc: any, curr: any) => {
      acc[toCamelCase(curr[keyName])] = curr.id;
      return acc
    }, {})

    console.log(keyName)
    const fileContent = `// This file is auto-generated by the Lumexia Initialization script.
// Do not edit this file manually.

export const ${exportName} = ${JSON.stringify(transformedRecords, null, 2)} as const;
`;


    // ensure static records directory exists then write data
    fs.mkdirSync(path.dirname(outputPath), { recursive: true });
    fs.writeFileSync(outputPath, fileContent);
    console.log(`✅ ${exportName} data written to ${outputPath}`);


  }

}

// Execute the main function
Main()
  .catch((error) => {
    console.error('💔 An error occurred during initialization:', error);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
    console.log('🎉 Initialization process finished.');
  });
