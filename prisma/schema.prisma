//ðŸ§©Don't Edit this file.âœ¨Generated in Tue Sep 03 2024 11:37:15 GMT-0700 (Pacific Daylight Time)âœ¨
model PaymentMethod {
  id                     String                  @id @default(uuid())
  name                   String
  type                   String
  identifier             String
  image                  String
  limit                  Float
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  supplierPaymentMethods SupplierPaymentMethod[]
  purchaseOrders         PurchaseOrder[]

  @@map("payment_methods")
}

model RecordStatus {
  id                          String                        @id @default(uuid())
  name                        String
  description                 String
  createdAt                   DateTime                      @default(now()) @map("created_at")
  updatedAt                   DateTime                      @updatedAt @map("updated_at")
  BatchSize                   BatchSize[]
  MasterBatchProductionRecord MasterBatchProductionRecord[]

  @@map("record_statuses")
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  details    Json
  user       User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Equipment {
  id            String          @id @default(uuid())
  name          String
  identifier    String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  StepEquipment StepEquipment[]

  @@map("equipment")
}

model ContainerType {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Container Container[]

  @@map("container_types")
}

model Container {
  id              String            @id @default(uuid())
  lotId           String            @map("lot_id")
  containerTypeId String            @map("container_type_id")
  uomId           String            @map("uom_id")
  containerWeight Float             @map("container_weight")
  containerType   ContainerType     @relation(fields: [containerTypeId], references: [id])
  uom             UnitOfMeasurement @relation(fields: [uomId], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  lot             Lot               @relation(fields: [lotId], references: [id])

  @@map("containers")
}

model LotOrigin {
  id              String        @id @default(uuid())
  lotId           String        @map("lot_id")
  purchaseOrderId String        @map("purchase_order_id")
  // FUTURE add batchId
  originType      String        @map("origin_type")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  lot             Lot           @relation(fields: [lotId], references: [id])

  @@map("lot_origins")
}

model Lot {
  id              String            @id @default(uuid())
  itemId          String            @map("item_id")
  lotNumber       String            @map("lot_number")
  initialQuantity Float             @map("initial_quantity")
  uomId           String            @map("uom_id")
  item            Item              @relation(fields: [itemId], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  containers      Container[]
  transactions    Transaction[]
  lotOrigin       LotOrigin[]
  uom             UnitOfMeasurement @relation(fields: [uomId], references: [id])

  @@map("lots")
}

model TransactionType {
  id           String        @id @default(uuid())
  name         String
  deduction    Boolean
  transactions Transaction[]

  @@map("transaction_types")
}

model Transaction {
  id                String            @id @default(uuid())
  lotId             String            @map("lot_id")
  transactionTypeId String            @map("transaction_type_id")
  userId            String            @map("user_id")
  uomId             String            @map("uom_id")
  amount            Float
  systemNote        String            @map("system_note")
  userNote          String            @map("user_note")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  transactionType   TransactionType   @relation(fields: [transactionTypeId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  unitOfMeasurement UnitOfMeasurement @relation(fields: [uomId], references: [id])
  lot               Lot               @relation(fields: [lotId], references: [id])

  @@map("transactions")
}

model UnitOfMeasurementConversion {
  id               String            @id @default(uuid())
  uomAId           String            @map("uom_a_id")
  uomBId           String            @map("uom_b_id")
  conversionFactor Float             @map("conversion_factor")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  uomA             UnitOfMeasurement @relation("UnitOfMeasurementConversionUomA", fields: [uomAId], references: [id])
  uomB             UnitOfMeasurement @relation("UnitOfMeasurementConversionUomB", fields: [uomBId], references: [id])

  @@map("unit_of_measurement_conversions")
}

model UnitOfMeasurement {
  id                 String                        @id @default(uuid())
  name               String
  abbreviation       String
  uomA               UnitOfMeasurementConversion[] @relation("UnitOfMeasurementConversionUomA")
  uomB               UnitOfMeasurementConversion[] @relation("UnitOfMeasurementConversionUomB")
  createdAt          DateTime                      @default(now()) @map("created_at")
  updatedAt          DateTime                      @updatedAt @map("updated_at")
  lots               Lot[]
  transactions       Transaction[]
  container          Container[]
  purchaseOrderItem  PurchaseOrderItem[]
  BatchSize          BatchSize[]
  BprBillOfMaterials BprBillOfMaterials[]

  @@map("units_of_measurement")
}

model AliasType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Alias     Alias[]

  @@map("alias_types")
}

model Alias {
  id            String          @id @default(uuid())
  name          String
  aliasTypeId   String          @map("alias_type_id")
  itemId        String          @map("item_id")
  aliasType     AliasType       @relation(fields: [aliasTypeId], references: [id])
  item          Item            @relation(fields: [itemId], references: [id])
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  supplierAlias SupplierAlias[]

  @@map("aliases")
}

model InventoryType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]

  @@map("inventory_types")
}

model ItemType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]

  @@map("item_types")
}

model Item {
  id                          String                        @id @default(uuid())
  name                        String
  referenceCode               String                        @unique @map("reference_code")
  itemTypeId                  String                        @map("item_type_id")
  procurementTypeId           String                        @map("procurement_type_id")
  inventoryTypeId             String                        @map("inventory_type_id")
  createdAt                   DateTime                      @default(now()) @map("created_at")
  updatedAt                   DateTime                      @updatedAt @map("updated_at")
  itemType                    ItemType                      @relation(fields: [itemTypeId], references: [id])
  procurementType             ProcurementType               @relation(fields: [procurementTypeId], references: [id])
  inventoryType               InventoryType                 @relation(fields: [inventoryTypeId], references: [id])
  lot                         Lot[]
  aliases                     Alias[]
  purchaseOrderItem           PurchaseOrderItem[]
  BillOfMaterial              BillOfMaterial[]
  MasterBatchProductionRecord MasterBatchProductionRecord[]

  @@map("items")
}

model ProcurementType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]

  @@map("procurement_types")
}

model BatchProductionRecord {
  id            String    @id @default(uuid())
  mbprId        String    @map("mbpr_id")
  bprStatusId   String    @map("bpr_status_id")
  batchSizeId   String    @map("batch_size_id")
  scheduledAt   DateTime? @map("scheduled_at")
  completedAt   DateTime? @map("completed_at")
  releasedAt    DateTime? @map("released_at")
  referenceCode Int       @default(autoincrement()) @map("reference_code")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  mbpr               MasterBatchProductionRecord @relation(fields: [mbprId], references: [id])
  status             BprStatus                   @relation(fields: [bprStatusId], references: [id])
  batchSize          BatchSize                   @relation(fields: [batchSizeId], references: [id])
  BprBillOfMaterials BprBillOfMaterials[]

  @@map("batch_production_records")
}

model BatchSize {
  id             String   @id @default(uuid())
  mbprId         String   @map("mbpr_id")
  quantity       Float
  uomId          String   @map("uom_id")
  recordStatusId String   @map("record_status_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  mbpr                  MasterBatchProductionRecord @relation(fields: [mbprId], references: [id])
  uom                   UnitOfMeasurement           @relation(fields: [uomId], references: [id])
  recordStatus          RecordStatus                @relation(fields: [recordStatusId], references: [id])
  BatchProductionRecord BatchProductionRecord[]

  @@map("batch_sizes")
}

model BatchStep {
  id        String   @id @default(uuid())
  mbprId    String   @map("mbpr_id")
  sequence  Int
  phase     String
  label     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  mbpr            MasterBatchProductionRecord @relation(fields: [mbprId], references: [id])
  BillOfMaterial  BillOfMaterial[]
  StepActionable  StepActionable[]
  StepAddendum    StepAddendum[]
  StepEquipment   StepEquipment[]
  StepInstruction StepInstruction[]

  @@map("batch_steps")
}

model BillOfMaterial {
  id            String   @id @default(uuid())
  itemId        String   @map("item_id")
  mbprId        String   @map("mbpr_id")
  stepId        String   @map("step_id")
  identifier    String
  concentration Float
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  item               Item                        @relation(fields: [itemId], references: [id])
  mbpr               MasterBatchProductionRecord @relation(fields: [mbprId], references: [id])
  step               BatchStep                   @relation(fields: [stepId], references: [id])
  BprBillOfMaterials BprBillOfMaterials[]

  @@map("bill_of_materials")
}

model BprBillOfMaterials {
  id        String   @id @default(uuid())
  bprId     String   @map("bpr_id")
  bomId     String   @map("bom_id")
  quantity  Float
  uomId     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  bpr BatchProductionRecord @relation(fields: [bprId], references: [id])
  bom BillOfMaterial        @relation(fields: [bomId], references: [id])
  uom UnitOfMeasurement     @relation(fields: [uomId], references: [id])

  @@map("bpr_bills_of_materials")
}

model BprStatus {
  id                    String                  @id @default(uuid())
  name                  String
  description           String
  sequence              Int                     @unique
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  BatchProductionRecord BatchProductionRecord[]

  @@map("bpr_statuses")
}

model MasterBatchProductionRecord {
  id                 String   @id @default(uuid())
  producesItemId     String   @map("produces_item_id")
  recordStatusId     String   @map("record_status_id")
  versionLabel       String?  @map("version_label")
  estimatedTotalTime Float?   @map("estimated_total_time")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  producesItem          Item                    @relation(fields: [producesItemId], references: [id])
  recordStatus          RecordStatus            @relation(fields: [recordStatusId], references: [id])
  BatchProductionRecord BatchProductionRecord[]
  BatchSize             BatchSize[]
  BatchStep             BatchStep[]
  BillOfMaterial        BillOfMaterial[]

  @@map("master_batch_production_records")
}

model StepActionable {
  id               String   @id @default(uuid())
  stepId           String   @map("step_id")
  actionableTypeId String   @map("actionable_type_id")
  required         Boolean
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  step           BatchStep          @relation(fields: [stepId], references: [id])
  actionableType StepActionableType @relation(fields: [actionableTypeId], references: [id])

  @@map("step_actionables")
}

model StepActionableType {
  id          String   @id @default(uuid())
  name        String
  userRoleId  String   @map("user_role_id")
  description String?
  dataType    String   @map("data_type")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userRole       UserRole         @relation(fields: [userRoleId], references: [id])
  StepActionable StepActionable[]

  @@map("step_actionable_types")
}

model StepAddendum {
  id             String   @id @default(uuid())
  stepId         String   @map("step_id")
  addendumTypeId String   @map("addendum_type_id")
  content        String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  step         BatchStep        @relation(fields: [stepId], references: [id])
  addendumType StepAddendumType @relation(fields: [addendumTypeId], references: [id])

  @@map("step_addendums")
}

model StepAddendumType {
  id           String         @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  StepAddendum StepAddendum[]

  @@map("step_addendum_types")
}

model StepEquipment {
  id          String   @id @default(uuid())
  stepId      String   @map("step_id")
  equipmentId String   @map("equipment_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  step      BatchStep @relation(fields: [stepId], references: [id])
  equipment Equipment @relation(fields: [equipmentId], references: [id])

  @@map("step_equipment")
}

model StepInstruction {
  id                 String   @id @default(uuid())
  stepId             String   @map("step_id")
  instructionContent String   @map("instruction_content")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  step BatchStep @relation(fields: [stepId], references: [id])

  @@map("step_instructions")
}

model PurchaseOrderItem {
  id                    String              @id @default(uuid())
  purchaseOrderId       String              @map("purchase_order_id")
  itemId                String              @map("item_id")
  quantity              Float
  pricePerUnit          Float               @map("price_per_unit")
  uomId                 String              @map("uom_id")
  purchaseOrderStatusId String              @map("purchase_order_status_id")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  purchaseOrders        PurchaseOrder       @relation(fields: [purchaseOrderId], references: [id])
  item                  Item                @relation(fields: [itemId], references: [id])
  uom                   UnitOfMeasurement   @relation(fields: [uomId], references: [id])
  purchaseOrderStatus   PurchaseOrderStatus @relation(fields: [purchaseOrderStatusId], references: [id])

  @@map("purchase_order_items")
}

model PurchaseOrderNote {
  id              String        @id @default(uuid())
  purchaseOrderId String
  userId          String
  content         String
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  user            User          @relation(fields: [userId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  @@map("purchase_order_notes")
}

model PurchaseOrderStatus {
  id                String              @id @default(uuid())
  sequence          Int                 @unique
  name              String              @unique
  purchaseOrders    PurchaseOrder[]
  purchaseOrderItem PurchaseOrderItem[]

  @@map("purchase_order_status")
}

model PurchaseOrder {
  id                 String              @id @default(uuid())
  referenceCode      Int                 @default(autoincrement()) @map("reference_code")
  submittingUserId   String              @map("submitting_user_id")
  supplierId         String              @map("supplier_id")
  statusId           String              @map("status_id")
  paymentMethodId    String?             @map("payment_method_id")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  user               User                @relation(fields: [submittingUserId], references: [id])
  paymentMethod      PaymentMethod?      @relation(fields: [paymentMethodId], references: [id])
  status             PurchaseOrderStatus @relation(fields: [statusId], references: [id])
  purchaseOrderItems PurchaseOrderItem[]
  purchaseOrderNotes PurchaseOrderNote[]
  lotOrigins         LotOrigin[]

  @@map("purchase_orders")
}

model SupplierAlias {
  id         String   @id @default(uuid())
  aliasId    String   @map("alias_id")
  supplierId String   @map("supplier_id")
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  alias      Alias    @relation(fields: [aliasId], references: [id])

  @@map("supplier_aliases")
}

model SupplierContactNote {
  id                String          @id @default(uuid())
  supplierContactId String          @map("supplier_contact_id")
  content           String
  supplierContact   SupplierContact @relation(fields: [supplierContactId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("supplier_contact_notes")
}

model SupplierContact {
  id                   String                @id @default(uuid())
  supplierId           String                @map("supplier_id")
  firstName            String                @map("first_name")
  lastName             String                @map("last_name")
  email                String
  phone                String
  type                 String
  supplier             Supplier              @relation(fields: [supplierId], references: [id])
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  supplierContactNotes SupplierContactNote[]

  @@map("supplier_contacts")
}

model SupplierNote {
  id         String   @id @default(uuid())
  supplierId String
  content    String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("supplier_notes")
}

model SupplierPaymentMethod {
  id              String   @id @default(uuid())
  supplierId      String   @map("supplier_id")
  paymentMethodId String   @map("payment_method_id")
  createdAt       DateTime @default(now()) @map("created_at")

  updatedAt     DateTime      @updatedAt @map("updated_at")
  supplier      Supplier      @relation(fields: [supplierId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("supplier_payment_methods")
}

model Supplier {
  id                    String                  @id @default(uuid())
  name                  String
  addressStreet1        String                  @map("address_street1")
  addressStreet2        String?                 @map("address_street2")
  addressCity           String                  @map("address_city")
  addressState          String                  @map("address_state")
  addressZip            String                  @map("address_zip")
  phone                 String
  purchaseOrders        PurchaseOrder[]
  supplierAlias         SupplierAlias[]
  supplierNotes         SupplierNote[]
  SupplierPaymentMethod SupplierPaymentMethod[]
  SupplierContact       SupplierContact[]

  @@map("suppliers")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model UserRoleAssignment {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  userRoleId String   @map("user_role_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id])
  userRole UserRole @relation(fields: [userRoleId], references: [id])

  @@map("user_role_assignments")
}

model UserRole {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  StepActionableType StepActionableType[]
  UserRoleAssignment UserRoleAssignment[]

  @@map("user_roles")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  transactions  Transaction[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  purchaseOrders     PurchaseOrder[]
  purchaseOrderNotes PurchaseOrderNote[]
  activityLogs       ActivityLog[]
  UserRoleAssignment UserRoleAssignment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
