//ðŸ§©Don't Edit this file.âœ¨Generated in Thu May 23 2024 13:25:46 GMT-0700 (Pacific Daylight Time)âœ¨

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContainerType {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Container Container[]

  @@map("container_types")
}

model Container {
  id              String            @id @default(uuid())
  lotId           String            @map("lot_id")
  containerTypeId String            @map("container_type_id")
  uomId           String            @map("uom_id")
  containerWeight Float             @map("container_weight")
  containerType   ContainerType     @relation(fields: [containerTypeId], references: [id])
  uom             UnitOfMeasurement @relation(fields: [uomId], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  lot             Lot               @relation(fields: [lotId], references: [id])

  @@map("containers")
}

model Lot {
  id              String            @id @default(uuid())
  itemId          String            @map("item_id")
  lotNumber       String            @map("lot_number")
  initialQuantity Float             @map("initial_quantity")
  uomId           String            @map("uom_id")
  item            Item              @relation(fields: [itemId], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  containers      Container[]
  transactions    Transaction[]
  uom             UnitOfMeasurement @relation(fields: [uomId], references: [id])

  @@map("lots")
}

model TransactionType {
  id           String        @id @default(uuid())
  name         String
  deduction    Boolean
  transactions Transaction[]

  @@map("transaction_types")
}

model Transaction {
  id                String            @id @default(uuid())
  lotId             String            @map("lot_id")
  transactionTypeId String            @map("transaction_type_id")
  userId            String            @map("user_id")
  uomId             String            @map("uom_id")
  amount            Float
  systemNote        String            @map("system_note")
  userNote          String            @map("user_note")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  transactionType   TransactionType   @relation(fields: [transactionTypeId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  unitOfMeasurement UnitOfMeasurement @relation(fields: [uomId], references: [id])
  lot               Lot               @relation(fields: [lotId], references: [id])

  @@map("transactions")
}

model UnitOfMeasurementConversion {
  id               String            @id @default(uuid())
  uomAId           String            @map("uom_a_id")
  uomBId           String            @map("uom_b_id")
  conversionFactor Float             @map("conversion_factor")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  uomA             UnitOfMeasurement @relation("UnitOfMeasurementConversionUomA", fields: [uomAId], references: [id])
  uomB             UnitOfMeasurement @relation("UnitOfMeasurementConversionUomB", fields: [uomBId], references: [id])

  @@map("unit_of_measurement_conversions")
}

model UnitOfMeasurement {
  id                String                        @id @default(uuid())
  name              String
  abbreviation      String
  uomA              UnitOfMeasurementConversion[] @relation("UnitOfMeasurementConversionUomA")
  uomB              UnitOfMeasurementConversion[] @relation("UnitOfMeasurementConversionUomB")
  createdAt         DateTime                      @default(now()) @map("created_at")
  updatedAt         DateTime                      @updatedAt @map("updated_at")
  lots              Lot[]
  transactions      Transaction[]
  container         Container[]
  purchaseOrderItem PurchaseOrderItem[]

  @@map("units_of_measurement")
}

model AliasType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Alias     Alias[]

  @@map("alias_types")
}

model Alias {
  id            String          @id @default(uuid())
  name          String
  aliasTypeId   String          @map("alias_type_id")
  itemId        String          @map("item_id")
  aliasType     AliasType       @relation(fields: [aliasTypeId], references: [id])
  item          Item            @relation(fields: [itemId], references: [id])
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  supplierAlias SupplierAlias[]

  @@map("aliases")
}

model InventoryType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]

  @@map("inventory_types")
}

model ItemType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]

  @@map("item_types")
}

model Item {
  id                String              @id @default(uuid())
  name              String
  referenceCode     String              @unique @map("reference_code")
  itemTypeId        String              @map("item_type_id")
  procurementTypeId String              @map("procurement_type_id")
  inventoryTypeId   String              @map("inventory_type_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  itemType          ItemType            @relation(fields: [itemTypeId], references: [id])
  procurementType   ProcurementType     @relation(fields: [procurementTypeId], references: [id])
  inventoryType     InventoryType       @relation(fields: [inventoryTypeId], references: [id])
  lot               Lot[]
  aliases           Alias[]
  purchaseOrderItem PurchaseOrderItem[]

  @@map("items")
}

model ProcurementType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]

  @@map("procurement_types")
}

model PurchaseOrderItem {
  id                    String              @id @default(uuid())
  purchaseOrderId       String              @map("purchase_order_id")
  itemId                String              @map("item_id")
  quantity              Float
  pricePerUnit          Float               @map("price_per_unit")
  uomId                 String              @map("uom_id")
  purchaseOrderStatusId String              @map("purchase_order_status_id")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  purchaseOrders        PurchaseOrder       @relation(fields: [purchaseOrderId], references: [id])
  item                  Item                @relation(fields: [itemId], references: [id])
  uom                   UnitOfMeasurement   @relation(fields: [uomId], references: [id])
  purchaseOrderStatus   PurchaseOrderStatus @relation(fields: [purchaseOrderStatusId], references: [id])

  @@map("purchase_order_items")
}

model PurchaseOrderNote {
  id              String        @id @default(uuid())
  purchaseOrderId String
  userId          String
  content         String
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  user            User          @relation(fields: [userId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model PurchaseOrderStatus {
  id                String              @id @default(uuid())
  sequence          Int                 @unique
  name              String              @unique
  purchaseOrders    PurchaseOrder[]
  purchaseOrderItem PurchaseOrderItem[]

  @@map("purchase_order_status")
}

model PurchaseOrder {
  id                 String              @id @default(uuid())
  referenceCode      Int                 @default(autoincrement()) @map("reference_code")
  submittingUserId   String              @map("submitting_user_id")
  supplierId         String              @map("supplier_id")
  statusId           String              @map("status_id")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  user               User                @relation(fields: [submittingUserId], references: [id])
  status             PurchaseOrderStatus @relation(fields: [statusId], references: [id])
  PurchaseOrderItem  PurchaseOrderItem[]
  purchaseOrderNotes PurchaseOrderNote[]

  @@map("purchase_orders")
}

model SupplierAlias {
  id         String   @id @default(uuid())
  aliasId    String   @map("alias_id")
  supplierId String   @map("supplier_id")
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  alias      Alias    @relation(fields: [aliasId], references: [id])

  @@map("supplier_aliases")
}

model Supplier {
  id             String          @id @default(uuid())
  name           String
  addressStreet1 String          @map("address_street1")
  addressStreet2 String?         @map("address_street2")
  addressCity    String          @map("address_city")
  addressState   String          @map("address_state")
  addressZip     String          @map("address_zip")
  phone          String
  purchaseOrders PurchaseOrder[]
  supplierAlias  SupplierAlias[]

  @@map("suppliers")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  transactions  Transaction[]

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  purchaseOrders     PurchaseOrder[]
  purchaseOrderNotes PurchaseOrderNote[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
